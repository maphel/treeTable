import * as React from 'react';
import type { ColumnDef, RowId, RowModel, ViewMode } from '../types';
import type { VisibleRow } from './types';
export type DraggableRowProps<T extends object> = {
    data: VisibleRow<T>;
    visibleColumns: ColumnDef<T>[];
    size: 'small' | 'medium';
    readOnly: boolean;
    showActionsColumn: boolean;
    getRowCanDrag?: (row: RowModel<T>) => boolean;
    getRowCanDrop?: (source: RowModel<T>, target: RowModel<T>, position: 'inside' | 'before' | 'after') => boolean;
    validTargets: Set<RowId> | null;
    overId: string | null;
    activeId: string | null;
    byKey: Map<string, RowModel<T>>;
    toggle: (id: RowId) => void;
    viewMode: ViewMode | undefined;
    getRowActions?: (row: RowModel<T>) => React.ReactNode;
    editingKey: string | null;
    editingValue: any;
    setEditingKey: React.Dispatch<React.SetStateAction<string | null>>;
    setEditingValue: React.Dispatch<React.SetStateAction<any>>;
    autoClosedKeys: Set<string>;
    markAutoClosed: (key: string) => void;
    startEdit: (row: RowModel<T>, column: ColumnDef<T>) => void;
    onEditCommit?: (row: RowModel<T>, column: ColumnDef<T>, next: unknown) => Promise<void> | void;
};
export default function DraggableRow<T extends object = {}>(props: DraggableRowProps<T>): import("react/jsx-runtime").JSX.Element;
